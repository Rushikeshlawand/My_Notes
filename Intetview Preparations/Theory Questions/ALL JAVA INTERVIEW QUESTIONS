1.  Java Platform Independent if then how?
    Yes, Java is a Platform Independent language. 
    Unlike many programming languages javac compiler compiles the program to form a bytecode or .class file. 
    This file is independent of the software or hardware running but needs a JVM(Java Virtual Machine) file preinstalled 
    in the operating system for further execution of the bytecode.
    Although JVM is platform dependent, the bytecode can be created on any System and can be executed in any 
    other system despite hardware or software being used which makes Java platform independent.

2. What are the top Java Features?
    Simple: Java is quite simple to understand and the syntax
    Platform Independent: Java is platform independent means we can run the same program in 
    any software and hardware and will get the same result.
    Interpreted: Java is interpreted as well as a compiler-based language. 
    Robust: features like Garbage collection, exception handling, etc that make the language robust.
    Object-Oriented: Java is an object-oriented language that supports the concepts of class,  objects, four pillars of OOPS, etc. 
    Secured: As we can directly share an application with the user without sharing the actual program makes Java a secure language. 
    High Performance:  faster than other traditional interpreted programming languages.
    Dynamic: supports dynamic loading of classes and interfaces.
    Distributed: feature of Java makes us able to access files by calling the methods from any machine connected.
    Multithreaded: deal with multiple tasks at once by defining multiple threads
    Architecture Neutral: it is not dependent on the architecture.

3. What is JVM?
    JVM stands for Java Virtual Machine it is a Java interpreter. 
    It is responsible for loading, verifying, and executing the bytecode created in Java.
    Although it is platform dependent which means the software of JVM is different for different Operating Systems
    it plays a vital role in making Java platform Independent.

4. What is JIT?

    JIT stands for (Just-in-Time) compiler is a part of JRE(Java Runtime Environment), it is used for better 
    performance of the Java applications during run-time. The use of JIT is mentioned in step by step process 
    mentioned below:
        Source code is compiled with javac compiler to form bytecode
        Bytecode is further passed on to JVM 
        JIT is a part of JVM, JIT is responsible for compiling bytecode into native machine code at run time.
        The JIT compiler is enabled throughout, while it gets activated when a method is invoked. For a compiled method, the JVM directly calls the compiled code, instead of interpreting it.
        As JVM calls the compiled code that increases the performance and speed of the execution.\

5. What are Memory storages available with JVM?
    c:\Users\rushi\AppData\Local\Temp\JVM-Areas-768.png
    Class(Method) Area: stores class-level data of every class such as the runtime constant pool, field, and method data, and the code for methods.
    Heap: Objects are created or objects are stored. It is used to allocate memory to objects during run time.
    Stack: stores data and partial results which will be needed while returning value for method and performing dynamic linking
    Program Counter Register: stores the address of the Java virtual machine instruction currently being executed.
    Native Method Stack: stores all the native methods used in the application.

6. What is a classloader?
    Classloader is the part of JRE(Java Runtime Environment), during the execution of the bytecode or created .class file 
    classloader is responsible for dynamically loading the java classes and interfaces to JVM(Java Virtual Machine). 
    Because of classloaders Java run time system does not need to know about files and file systems.

7. Difference between JVM, JRE, and JDK.
    JVM: JVM also known as Java Virtual Machine is a part of JRE. JVM is a type of interpreter responsible for converting bytecode into machine-readable code. JVM itself is platform dependent but it interprets the bytecode which is the platform-independent reason why Java is platform-independent. 
    JRE: JRE stands for Java Runtime Environment, it is an installation package that provides an environment to run the Java program or application on any machine.
    JDK: JDK stands for Java Development Kit which provides the environment to develop and execute Java programs. JDK is a package that includes two things Development Tools to provide an environment to develop your Java programs and, JRE to execute Java programs or applications.

9. Explain public static void main(String args[]) in Java.

    Main_function

    Unlike any other programming language like C, C++, etc. In Java, we declared the main function as a public static void main (String args[]). The meanings of the terms are mentioned below:

        public: the public is the access modifier responsible for mentioning who can access the element or the method and what is the limit.  It is responsible for making the main function globally available. It is made public so that JVM can invoke it from outside the class as it is not present in the current class.
        static: static is a keyword used so that we can use the element without initiating the class so to avoid the unnecessary allocation of the memory. 
        void: void is a keyword and is used to specify that a method doesn’t return anything. As the main function doesn’t return anything we use void.
        main: main represents that the function declared is the main function. It helps JVM to identify that the declared function is the main function.
        String args[]: It stores Java command-line arguments and is an array of type java.lang.String class.

11. What will happen if we declare don’t declare the main as static?
    We can declare the main method without using static and without getting any errors. But, the main method will not be treated as the entry point to the application or the program.

12. What are Packages in Java?
    Packages in Java can be defined as the grouping of related types of classes, interfaces, etc providing access to protection and namespace management.

13. Why Packages are used?
    Packages are used in Java in order to prevent naming conflicts, control access, and make searching/locating and usage of classes, interfaces, etc easier.

14. What are the advantages of Packages in Java?
    There are various advantages of defining packages in Java.

    Packages avoid name clashes.
    The Package provides easier access control.
    We can also have the hidden classes that are not visible outside and are used by the package.
    It is easier to locate the related classes.

15. How many types of packages are there in Java?
    There are two types of packages in Java

    User-defined packages
    Build In packages

16. Explain different data types in Java.

    There are 2 types of data types in Java as mentioned below:

    Primitive Data Type
    Non-Primitive Data Type or Object Data type

    Primitive Data Type: Primitive data are single values with no special capabilities. There are 8 primitive data types:

    boolean: stores value true or false
    byte: stores an 8-bit signed two’s complement integer
    char: stores a single 16-bit Unicode character
    short: stores a 16-bit signed two’s complement integer
    int: stores a 32-bit signed two’s complement integer
    long: stores a 64-bit two’s complement integer
    float: stores a single-precision 32-bit IEEE 754 floating-point
    double: stores a double-precision 64-bit IEEE 754 floating-point

    Non-Primitive Data Type: Reference Data types will contain a memory address of the variable’s values because it is not able to directly store the values in the memory. Types of Non-Primitive are mentioned below:

    Strings
    Array
    Class
    Object
    Interface

18. Can we declare Pointer in Java?
    No, Java doesn’t provide the support of Pointer. As Java needed to be more secure because which feature of the pointer is not provided in Java

21. What is the Wrapper class in Java?
    Wrapper, in general, is referred to a larger entity that encapsulates a smaller entity. Here in Java, the wrapper class is an object class that encapsulates the primitive data types. 
    The primitive data types are the ones from which further data types could be created. For example, integers can further lead to the construction of long, byte, short, etc. On the other hand, the string cannot, hence it is not primitive. 
    Getting back to the wrapper class, Java contains 8 wrapper classes. They are Boolean, Byte, Short, Integer, Character, Long, Float, and Double. Further, custom wrapper classes can also be created in Java which is similar to the concept of Structure in the C programming language. We create our own wrapper class with the required data types.

22. Why do we need wrapper classes?
    The wrapper class is an object class that encapsulates the primitive data types, and we need them for the following reasons:

    Wrapper classes are final and immutable
    Provides methods like valueOf(), parseInt(), etc.
    It provides the feature of autoboxing and unboxing.

25. What is a Class Variable?
    In Java, a class variable (also known as a static variable) is a variable that is declared within a class but outside of any method, constructor, or block. Class variables are declared with the static keyword, and they are shared by all instances (objects) of the class as well as by the class itself. No matter how many objects are derived from a class, each class variable would only exist once.

28. What is a static variable?
    The static keyword is used to share the same variable or method of a given class. Static variables are the variables that once declared then a single copy of the variable is created and shared among all objects at the class level.

38. Difference in the use of print, println, and printf.
    print, println, and printf all are used for printing the elements but print prints all the elements and the cursor remains in the same line. println shifts the cursor to next line. And with printf we can use format identifiers too.

40. How many types of operators are available in Java? 
    All types of operators in Java are mentioned below:

    Arithmetic Operators
    Unary Operators
    Assignment Operator
    Relational Operators
    Logical Operators
    Ternary Operator
    Bitwise Operators
    Shift Operators
    instance of operator

47. What are the differences between String and StringBuffer?
    String
        

    StringBuffer
    Store of a sequence of characters.            	Provides functionality to work with the strings.
    It is immutable.	It is mutable (can be modified and other string operations could be performed on them.)
    No thread operations in a string.                                                           	It is thread-safe (two threads can’t call the methods of StringBuffer simultaneously) 


What is the default value of elements in a newly created array in Java?
    For numeric types (int, float, etc.), the default value is 0.
    For boolean, the default value is false.
    For object references, the default value is null.

Explain the bubble sort algorithm.
    Bubble sort repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The process is repeated until the list is sorted.

Explain the quick sort algorithm.
    Quick sort is a divide-and-conquer algorithm that selects a 'pivot' element and partitions the array into two sub-arrays, according to whether elements are less than or greater than the pivot. The sub-arrays are then sorted recursively.

What is a multidimensional array? How do you declare it in Java?
A multidimensional array is an array of arrays. You can declare it in Java as follows:
int[][] array = new int[3][4]; // 2D array with 3 rows and 4 columns

