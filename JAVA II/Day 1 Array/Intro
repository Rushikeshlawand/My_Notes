What is an Array?
An array is a data structure that holds a fixed number of values of the same type.
Arrays are used to store collections of data, and they are especially useful when you need to work with large amounts of data efficiently.
Each value in an array is called an element, and each element is accessed by its numerical index.
Arrays provide an efficient way to store and manipulate collections of data. 

Importance of Arrays:
1. Efficient Data Storage: Arrays allow you to store multiple values in a single data structure, reducing the need for multiple variables.
2. Easy Data Access: Elements in an array can be accessed quickly using their indices.
3. Memory Management: Arrays provide a way to manage memory efficiently, especially when dealing with large datasets.
4. Simplifies Code: Using arrays can simplify the process of writing code for repetitive tasks by using loops to iterate over elements.
5. Foundation for Other Data Structures: Arrays are the foundation for more complex data structures like lists, stacks, queues, and matrices.


Declaring Arrays:

int[] numbers;  // Declares an array of integers
String[] names; // Declares an array of strings

Creating Arrays:

numbers = new int[5]; // Creates an array of integers with 5 elements
names = new String[3]; // Creates an array of strings with 3 elements

Initializing Arrays:

int[] numbers = {1, 2, 3, 4, 5}; // Creates and initializes an array of integers
String[] names = {"Alice", "Bob", "Charlie"}; // Creates and initializes an array of string


Accessing Elements of Array:

Array elements are accessed using their indices, starting from 0.

int firstNumber = numbers[0]; // Accesses the first element of the array
String firstName = names[0]; // Accesses the first element of the array


Modifying Elements:

You can modify elements in an array by assigning new values to specific indices.
numbers[2] = 10; // Changes the third element to 10
names[1] = "Eve"; // Changes the second element to "Eve"


Exercise 1: Create and Initialize an Array
Create an array of integers with the values {10, 20, 30, 40, 50} and print each element.

public class ArrayExercise1 {
    public static void main(String[] args) {
        int[] numbers = {10, 20, 30, 40, 50};
        for (int number : numbers) {
            System.out.println(number);
        }
    }
}


Exercise 2: Modify Array Elements
Create an array of strings with the values {"Java", "Python", "C++"} and change the second element to "JavaScript". Print all elements.

public class ArrayExercise2 {
    public static void main(String[] args) {
        String[] languages = {"Java", "Python", "C++"};
        languages[1] = "JavaScript";
        for (String language : languages) {
            System.out.println(language);
        }
    }
}


Exercise 3: Sum of Array Elements
Create an array of integers and find the sum of all its elements.

public class ArrayExercise3 {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};
        int sum = 0;
        for (int number : numbers) {
            sum += number;
        }
        System.out.println("Sum: " + sum);
    }
}

Exercise 4: Find the Maximum Element
Create an array of integers and find the maximum element.

public class ArrayExercise4 {
    public static void main(String[] args) {
        int[] numbers = {5, 3, 9, 1, 6};
        int max = numbers[0];
        for (int number : numbers) {
            if (number > max) {
                max = number;
            }
        }
        System.out.println("Maximum: " + max);
    }
}

Types of Arrays on the basis of Memory Allocation:

1. Static Arrays:
In this type of array, memory is allocated at compile time having a fixed size of it.
We cannot alter or update the size of this array. This type of memory allocation is also known as static or
compile-time memory allocation.


2. Dynamic Arrays:
In this type of array, memory is allocated at run time but not having a fixed size.
Suppose, a user wants to declare any random size of an array, then we will not use a static array,
instead of that a dynamic array is used. This type of memory allocation is also known as dynamic or
run-time memory allocation.