Week_No,Week_Name,Day_No,Class_Name,Agenda,Practice Session (2 Hours),Asynchronous Learning (1 Hour),DPP (Task + Questions)
1,"Introduction to the Software Development Industry and Web Development
Computer Programming Fundamentals",1,Decoding the Software Industry,"Introduction and Welcome to the Program
Diagnostic In-Class Quiz to gauge the learners
What is Software Development?
Job Opportunities in the Software Development industry
What does it take to be successful in this industry?
Latest trends in the software industry - The rise of AI","Logic puzzles and riddles to get them started on problem solving
Q&A Session",,Fundamental questions covering basics of web development and key industry stakeholders and trends.
,,2,Basics of Computer Networks and the Internet,"Talk about the genesis & history of the Internet
Understanding Computer Networks
""What happens when you type in a website URL in
the browser and hit enter? - Explain the journey""
""Talk about the request-response cycle that is 
typical to a website/web application.""
""How do web browsers work? Talk about popular 
browsers with a quick insight into their history""
Case Studies: Explain how popular websites/services work e.g. Amazon, Netflix etc.","Group Task - Solving everyday problems with technology. Divide the class into 2 - 3 groups, give them a broad problem to solve and let them come back with a vision for a solution.
Q&A Session",,"Questions covering concepts such as the request-response cycle, web browsers, URLs, networks"
,,3,Decoding Web Development,"Introduce HTML5, CSS3 and JavaScript as web development languages.
Explain the role of a server and server-side rendered content
Explain the difference between single-page applications, server-rendered applications and hybrid applications
Introduce the concept of libraries and frameworks for the frontend such as React, Angular and Vue
Introduce the backend and establish its role in the full-stack ecosystem. Talk about language-framework stacks.
Introduce the concept of databases and their role in the full-stack ecosystem.
Case Studies: Explain the architecture of full-stack applications",,,
,,4,Introduction to Computer Programming,"Introduction to Computer Programming
Exploring the insides of a computer program
How does a computer program work?
Syntax and Source Code
Introduction to Data Types - I
Introduce the concept of variables and values and establish their purpose in a computer program
In-Class Assessment : Basic Data Types and Use Cases","Team Activity: Divide the class into 2 - 3 teams. Learners have to identify the data types in actual code snippets. Explain why the data types have been used in a given situation.
Matching Data Types: Provide a list of different kinds of data (such as a phone number, a person's name, a price, a date, etc.) and ask learners to match each one to the most appropriate data type.","Introduction to Computer Programming | Module 1
Introduction to Computer Programming | Module 2","Questions on fundamentals of programming languages, syntax, source code, basic data types and their use cases."
,,5,Understanding Core Data Structures and Fundamental Constructs,"Introduce Data structures such as Stacks, Queues, Lists, Trees, Graphs, Arrays etc.
Establish concrete use cases and features of common data structures
Case Studies: Work through several case studies that explain the choice of data structure for a given situation
Quick Introduction to Pseudocode
Understanding Programming Constructs - Loops","Problem Solving Exercise: Given diverse situation, have the learners pick the right data structure to represent the data in the most efficient manner.","Introduction to Computer Programming | Module 3
Introduction to Computer Programming | Module 4",Fundamental questions on data structures including scenario based questions
2,"Computer Programming Fundamentals (Contd.)
Working with Git and GitHub for Version Control",1,Programming Constructs,"Understanding Conditionals
Understanding Functions
Fundamentals of Object-Oriented Programming - Concepts
What is an Algorithm?
Case Studies: Fundamental algorithm exercises",Algorithm Exercises,Introduction to Computer Programming | Module 5,"Algorithm exercises and solutions, Questions on fundamental programming constructs"
,,2,Introduction to Version Control and Git Basics,"Introduction to version control systems (VCS): Why version control is essential for developers.
Git basics: Installation, setting up Git, and configuration.
Initializing repositories and basic commands (git init, git add, git commit).","Setting up Git on personal computers.
Creating first repositories, making initial commits.
Practicing file addition and committing changes.",,
,,3,Branching and Merging,"Understanding branches in Git: Why and how to branch.
Creating, listing, and switching between branches (git branch, git checkout, and git switch).
Merging changes and resolving conflicts (git merge).","Creating and managing branches for different features or fixes.
Merging branches and handling merge conflicts through practical exercises.",,
,,4,Git Remote and GitHub Basics,"Introduction to GitHub and its importance.
Connecting a local repository to a remote repository (git remote add, git push, git pull).
Basics of working with GitHub: Repositories, forks, stars, and watching projects.","Pushing local repositories to GitHub.
Cloning repositories and pulling updates.
Forking projects on GitHub and cloning them locally.",,
,,5,Collaborative Development Using GitHub,"Collaborative workflows in GitHub (Feature Branch Workflow, Forking Workflow).
Using Pull Requests (PRs) for code review and collaboration.
Managing PRs: Reviewing, discussing, and merging.","Collaborating on a shared repository (students can pair up or work in small groups).
Opening, reviewing, and merging Pull Requests.
Resolving conflicts that arise during PRs.",,
3,Mastering Java - I,1,Introduction to Java and Setup,"Introduction to Java and its importance in software development.
Overview of the Java Development Kit (JDK) and Integrated Development Environment (IDE) setup.
Setting up Java Development Environment (JDK and IDE) on students' computers.
Writing and executing a simple ""Hello, World!"" program.",,,
,,2,Variables and Data Types,"Introduction to variables and their role in programming.
Explanation of data types: primitive (int, double, char, boolean) and reference (String).
Declaration, initialization, and usage of variables.
Hands-on exercises to practice declaring and using variables with different data types.",,,
,,3,Operators and Expressions,"Introduction to operators: arithmetic, relational, logical, and assignment operators.
Understanding expressions and their evaluation.
Precedence and associativity of operators.
Practical exercises to reinforce understanding of operators and expressions.",,,
,,4,Control Flow Statements (Part 1),"Introduction to control flow statements: if-else, switch-case.
Writing and executing conditional statements using if-else.
Implementing multi-way branching using switch-case.
Examples and exercises to practice writing conditional statements.",,,
,,5,Control Flow Statements (Part 2),"Introduction to iterative statements: for, while, do-while.
Writing and executing loops using for, while, and do-while.
Understanding loop control structures: break and continue.
Hands-on exercises to practice writing and executing loops.",,,
4,Mastering Java - II,1,Arrays,"Introduction to arrays and their importance in programming.
Declaring, creating, and initializing arrays.
Accessing array elements and performing operations on arrays.
Practical exercises to reinforce understanding of arrays.",,,
,,2,Methods (Part 1),"Introduction to methods and their role in code organization.
Declaring and invoking methods with parameters and return values.",,,
,,3,Methods (Part 2),"Understanding method overloading and its benefits.
Examples and exercises to practice defining and calling methods.",,,
,,4,Object-Oriented Concepts (Part 1),"Introduction to object-oriented programming (OOP) concepts: classes and objects.
Declaring classes, creating objects, and accessing object members.
Understanding constructors and their role in object initialization.
Practical exercises to practice creating classes and objects.",,,
,,5,Object-Oriented Concepts (Part 2),"Introduction to encapsulation, inheritance, and polymorphism.
Explaining access modifiers: public, private, protected, default.
Implementing inheritance and method overriding.
[Examples and exercises to reinforce understanding of OOP concepts.",,,
5,Data Structures and Algorithms - I,1,Arrays,"Introduction to Arrays
Array Declaration and Initialization
Accessing and Modifying Array Elements
Array Operations: Traversal, Searching, Sorting",,,
,,2,Linked Lists,"Introduction to Linked Lists
Singly Linked Lists
Doubly Linked Lists
Circular Linked Lists
Operations on Linked Lists: Insertion, Deletion, Traversal",,,
,,3,Stacks and Queues I,"Introduction to Stacks and Queues
Stack Operations: Push, Pop
Implementing Stacks using Arrays and Linked Lists",,,
,,4,Stacks and Queues II,"Queue Operations: Enqueue, Dequeue
Priority Queues
Implementing Stacks and Queues using Arrays and Linked Lists",,,
,,5,"HashTables, HashMaps, and HashSets I","Introduction to hashing
HashTables Intro
Collision in HashTables",,,
6,Data Structures and Algorithms - II,1,"HashTables, HashMaps, and HashSets II","HashMaps Intro
HashSet Intro
Zero Sum Subarray
Finding Largest Subarray With Equal 0s and 1s",,,
,,2,Algorithm Analysis,"Introduction to Algorithm Analysis
Time Complexity: Big O notation
Understanding Worst-case, Average-case, and Best-case Analysis
Examples of Time Complexity Analysis
Space Complexity Analysis",,,
,,3,Searching Part I,"Linear Search
Linear Search Implementation and Analysis
Binary Search: Introduction and Basic Idea
Introduction to divide and conquer based on binary search idea",,,
,,4,Searching Part II,"Binary Search Implementation and Analysis
Interpolation Search: Introduction and Basic Idea
Binary vs. Interpolation Search: Comparison and Analysis",,,
,,5,Sorting Part I,"Introduction to Sorting Algorithms
Bubble Sort: Introduction, Algorithm, and Analysis
Selection Sort: Introduction, Algorithm, and Analysis
Insertion Sort: Introduction, Algorithm, and Analysis",,,
7,Mastering Relational Databases using MySQL - I,1,Introduction to Databases,"Introduction to Databases 
Types of Databases and Differences 
Understanding Relational Databases and the Data Model 
Introduction to MySQL 
Setting up MySQL - Installation",,,
,,2,"Discovering Tables, Data Types and SQL","Understanding Tables, Data Types and Constraints 
Understanding Schemas and Database Objects 
Introduction to Structured-Query Language (SQL) 
Understanding Queries 
Working with the MySQL Workbench 
Creating a Database 
Creating a Table (Schema), SHOW and DROP 
Hands-on Examples: Creating tables",,,
,,3,Understanding CRUD,"What is Create-Read-Update-Delete (CRUD) 
Using the SELECT statement 
Filtering data using WHERE 
Using LIMIT 
Using ORDER BY, COUNT, AVG, SUM 
Hands-on Examples",,,
,,4,Exploring SQL Joins and Transactions,"Advanced SQL Queries - IN, LIKE, AND, OR, NOT Operators 
Working with JOINs: INNER, OUTER, CROSS, SELF 
Subqueries and Derived Tables 
Working with COMMIT, ROLLBACK 
Hands-on: JOIN Ops and Transactions",,,
,,5,Advanced Indexing and Full-Text Search,"Database Design and Optimization 
Entity Relationship Diagrams (ERD) 
Indexing and Full-text search 
Normalization and Denormalization techniques 
Hands-on: Optimizing queries and implementing indexes.",,,
8,Mastering Relational Databases using MySQL - II,1,Automating SQL Tasks with Stored Routines and Triggers,"Creating and querying views
Creating and using stored procedures
Creating and using custom functions
Working with triggers
Hands-On: An example that implements stored procedures, functions and triggers",,,
,,2,JDBC Fundamentals,"Introduction to JDBC and Setup 
Executing SQL through Java 
ResultSets and Data Types 
Handling errors",,,
,,3,Advanced JDBC Techniques,"Using PreparedStatement and Batch Processing 
Transaction Management in JDBC 
Working with BLOBs and CLOBs",,,
,,4,JPA,"ORM Concepts 
Entity Management 
JPQL Basics",,,
,,5,Project,"Build an end-to-end project using Java and MySQL 
Review Key Interview Questions regarding RDBMS and MySQL",,,
9,Advance Java 1,1,Collections,"Introduction to Collection framework,List,set,Queue,Map",,,
,,2,JDBC Fundamentals,"Basic Operation on Collections,Introduction to JDBC API",,,
,,3,CURD,CRUD operation using JDBC,,,
,,4,Servlet,"
Servlet lifecycles
Types of servlets
HttpServletRequest and HttpServletResponse",,,
,,5,JSP,"Developing a small application using Servlets,JSP lifecycle 
Types of tags in JSP, Implicit objects in JSP",,,
10,HTML5 and CSS3,1,Introduction to HTML5,"Introduction to HTML and its structure. 
Basic tags: <html>, <head>, <title>, <body>. 
Text formatting tags: <h1> to <h6>, <p>, <strong>, <em>. 
Lists: <ul>, <ol>, <li>. 
Links: <a>, attributes (href, target, etc.). 
Images: <img>, attributes (src, alt, width, height).",,,
,,2,More HTML5 Elements and Forms,"Semantic elements: <header>, <nav>, <section>, <article>, <footer>. 
Tables: <table>, <tr>, <td>, <th>. 
Forms: <form>, <input>, <textarea>, <select>, <button>. 
Form attributes and input types (text, password, checkbox, radio, etc.).",,,
,,3,Introduction to CSS3,"Introduction to CSS and its syntax. 
Inline, internal, and external CSS. 
Selectors: element selectors, class selectors, ID selectors. 
Basic styling properties: color, background, font, margin, padding. 
CSS box model.",,,
,,4,Layouts and Responsive Design,"Floats and clearing floats. 
Flexbox layout. 
Introduction to CSS Grid. 
Media queries for responsive design. 
Introduction to responsive frameworks like Bootstrap",,,
,,5,Advanced CSS3 and Project Work,"Transitions and animations. 
Advanced selectors: descendant, child, adjacent, pseudo-classes, pseudo-elements. 
Project work: students work on a small project applying what they've learned. 
Review and Q&A session. 
Resources for further learning.",,,
11,"Mastering JavaScript - I
",1,Introduction to JavaScript Basics,"Overview of JavaScript: its role in web development. 
Setting up the development environment (text editor, browser, console). 
Basic syntax: variables, data types, operators, and expressions. 
Control flow: if statements, switch statements, loops (for, while). 
Functions: defining functions, function expressions, arrow functions. 
Arrays: creating arrays, accessing elements, array methods. 
Practical exercises to solidify understanding.",,,
,,2,Working with Objects and DOM Manipulation,"Introduction to objects: creating objects, accessing properties and methods.
Object-oriented programming concepts: encapsulation, inheritance, polymorphism.
",,,
,,3,Working with Objects and DOM Manipulation,"
Document Object Model (DOM): understanding DOM structure.
Selecting elements, modifying content, attributes, and styles.
Event handling: adding event listeners, responding to user interactions.",,,
,,4,Advanced JavaScript Concepts,"
Closures: understanding lexical scope, closure scope, and closure use cases.
Asynchronous JavaScript: callbacks, promises, async/await for handling asynchronous operations.
",,,
,,5,Advanced JavaScript Concepts,"
Error handling: try/catch blocks, throwing and catching errors.
Regular expressions: pattern matching and manipulation.
Practical exercises incorporating advanced concepts.",,,
12,Mastering JavaScript - II,1,Functional Programming Paradigm,"Introduction to functional programming. 
Higher-order functions: map, filter, reduce. 


Pure functions and immutability. 
Functional programming patterns: currying, composition. 
Practice applying functional programming principles to solve problems",,,
,,2,Working with APIs and AJAX,"Understanding APIs and their importance in web development.
Making HTTP requests with XMLHttpRequest.
Introduction to Fetch API for making asynchronous requests.
",,,
,,3,Working with APIs and AJAX,"
Consuming RESTful APIs.
Handling API responses: JSON parsing, error handling.
Building a simple application that interacts with a public API.",,,
,,4,Introduction to ES6 and Modern JavaScript Features,"Overview of ES6 features: let/const, arrow functions, template literals. Destructuring assignment and spread/rest operators. Classes and inheritance in ES6",,,
,,5,Introduction to ES6 and Modern JavaScript Features,".
Modules: importing and exporting modules.
Practical exercises to implement ES6 features.",,,
13,Projects,,Ecommerce Website,,,,
,,,,,,,
14,"Building Frontend Applications using React, React Router and Redux - I",1,Introduction to React,"Overview of React and its advantages.
Setting up a development environment (Node.js, npm, create-react-app).
JSX syntax and basic components.
Rendering elements and components in the browser.",,,
,,2,Components and Props,"Creating functional and class components. 
Passing props to components. 
Component composition and reusability. 
Using defaultProps and propTypes for validation.",,,
,,3,State Management in React,"Understanding component state. 
Using useState hook for managing state in functional components. 
Updating state using setState in class components. 
State lifting and sharing between components.",,,
,,4,Handling Events and Forms,"Handling user events in React. 
Form handling and controlled components. 
Form validation and error handling. 
Refs for accessing DOM elements.",,,
,,5,React Lifecycle Methods,"Understanding component lifecycle phases. 
Using componentDidMount, componentDidUpdate, componentWillUnmount. 
Side effects with useEffect hook.",,,
15,"Building Frontend Applications using React, React Router and Redux - II",1,React Router,"Setting up routes with React Router. 
Route parameters and nested routes. 
Redirects and navigation guards. 
Handling 404 pages.",,,
,,2,Introduction to Redux,"Overview of Redux and its principles. 
Setting up Redux in a React application. 
Creating actions, reducers, and the store.",,,
,,3,React-Redux Integration,"Connecting Redux store to React components using Provider. 
Accessing Redux state in components with useSelector. 
Dispatching actions from components using useDispatch. 
Connecting multiple components to the Redux store.",,,
,,4,Advanced Redux Concepts,"Using selectors with reselect library for efficient state selection. 
Normalizing state shape for better manageability. 
Middleware in Redux: async actions with thunk middleware. 
Debugging Redux applications with Redux DevTools.",,,
,,5,Advanced Topics and Project Work,"Building a complex application using React and React-Redux. 
Applying all learned concepts to the project. 
Exploring advanced topics such as Redux Saga for handling complex side effects. 
Code review and optimization techniques for React-Redux applications.",,,
16,"Node.js and Express - I
",1,Introduction to Node.js,"Overview of Node.js and its architecture. 
Installing Node.js and npm. 
Creating and running a basic Node.js server. 
Understanding the event-driven, non-blocking I/O model.",,,
,,2,Core Modules in Node.js,"Exploring built-in modules in Node.js (fs, http, path, etc.). 
Using the fs module for file system operations. 
Creating a basic file server with the http module. 
Handling file uploads and downloads.",,,
,,3,Asynchronous Programming in Node.js,"Understanding asynchronous programming with callbacks. 
Working with Promises for async operations. 
Introduction to async/await syntax. 
Handling errors in asynchronous code.",,,
,,4,Building RESTful APIs with Express.js (Part 1),"Introduction to Express.js framework. 
Setting up a basic Express.js server. 
Creating routes and handling HTTP methods (GET, POST, PUT, DELETE). 
Parsing request body with middleware (body-parser, Express.json()).",,,
,,5,Building RESTful APIs with Express.js (Part 2),"Implementing CRUD operations with MongoDB and Mongoose. 
Connecting Express.js server to MongoDB database. 
Creating RESTful routes for CRUD operations. 
Validating and sanitizing input data with middleware.",,,
17,Node.js and Express - II,1,Authentication and Authorization,"Introduction to authentication and authorization concepts. 
Implementing user authentication with JWT (JSON Web Tokens). 
Protecting routes with middleware for authorization. 
Handling user registration, login, and logout.",,,
,,2,Error Handling and Logging,"Implementing error handling middleware in Express.js. 
Centralized error handling with try-catch blocks. 
Logging requests and errors with Morgan or custom middleware. 
Implementing graceful shutdowns and handling unhandled exceptions.",,,
,,3,Advanced Express.js Techniques,"Using Express Router for modular route handling. 
Implementing middleware for route-specific tasks. 
Using template engines (such as EJS or Handlebars) for server-side rendering. 
Handling static files and serving static content with Express.",,,
,,4,Security Best Practices,"Understanding common security threats in web applications. 
Implementing security measures such as CORS, CSRF protection. 
Sanitizing user input to prevent XSS and SQL injection attacks. 
Using helmet middleware for securing Express applications.",,,
,,5,Testing and Deployment,"Introduction to testing frameworks (such as Mocha, Chai) for Node.js applications.
Writing unit tests and integration tests for Express.js routes.
Continuous integration and deployment (CI/CD) pipelines.
Deploying Node.js applications to platforms like Heroku, AWS, or Azure.",,,
18,MongoDB,1,Introduction to MongoDB and NoSQL,"Overview of MongoDB: features, advantages, and use cases. 
Understanding NoSQL databases: key differences from SQL databases. 
Installing MongoDB locally or using MongoDB Atlas. 
Basic CRUD operations: Create, Read, Update, Delete.",,,
,,2,Data Modeling in MongoDB,"Document-oriented data model: understanding BSON and JSON-like documents. 
Designing schemas for MongoDB collections. 
Embedding vs. referencing documents. 
Schema design patterns and best practices.",,,
,,3,Querying and Aggregation in MongoDB,"Basic queries: find, findOne, count, sort, limit, skip. 
Filtering documents using query operators. 
Aggregation framework: pipeline stages and operators. 
Performing aggregation operations for data analysis.",,,
,,4,Indexing and Performance Optimization,"Understanding indexes in MongoDB: types of indexes. 
Creating and managing indexes for performance optimization. 
Explain plan: understanding query execution and optimization. 
Strategies for improving query performance.",,,
,,5,Advanced Topics and Best Practices,"Transactions and concurrency control in MongoDB. 
Replica sets and high availability: setting up and managing replica sets. 
Sharding: horizontal scaling with sharded clusters. 
Backup and disaster recovery strategies.",,,
19,Data Structures and Algorithms - III,1,Sorting Part II,"Merge Sort: Introduction, Algorithm, and Analysis
Comparison of Sorting Algorithms: Time and Space Complexity Analysis
Quick Sort: Introduction, Algorithm, and Analysis
Heap Sort: Introduction, Algorithm, and Analysis",,,
,,2,Binary Trees,"Introduction to Binary Trees
Tree Traversal: Inorder, Preorder, Postorder
Binary Tree Operations: Insertion, Deletion, Search",,,
,,3,Binary Search Trees,"Introduction to Binary Search Trees (BST)
Properties of BST
Operations on BST: Insertion, Deletion, Search
DFS, BFS in BSTs",,,
,,4,Graphs I,"Introduction to Graphs
Graph Representation: Adjacency Matrix, Adjacency List",,,
,,5,Graphs II,"Graph Traversal: Depth-First Search (DFS), 
Breadth-First Search (BFS)
Understand some use cases on Graphs, BFS and DFS and how to implement them",,,
20,Data Structures and Algorithms - IV,1,Dynamic Programming I,"Introduction to Dynamic Programming
Fibonacci Series
Dynamic Programming Approach for Fibonacci Series
Memoization technique for Fibonacci Series",,,
,,2,Dynamic Programming II,"Memoization and Tabulation
Implementation of Memoization and Tabulation for Fibonacci Series
Rod Cutting Problem: Introduction and Brute Force Approach",,,
,,3,Dynamic Programming III,"Dynamic Programming Approach for Longest Common Subsequence
Knapsack Problem: Introduction and Brute Force Approach
Coin Exchange Problem and how to solve in Dynamic Programming approach",,,
,,4,Greedy Algorithms I,"Introduction to Greedy Algorithms
Activity Selection Problem: Introduction and Greedy Approach
Fractional Knapsack Problem: Introduction and Greedy Approach
Huffman Coding: Introduction and Greedy Approach",,,
,,5,Greedy Algorithms II,"Implementing the Greedy Algorithm to solve the Scheduling Problem
Proof of correctness to the Scheduling code
The Depth Problem
Depth problem pseudocode and implementation",,,
21,Mastering Spring Boot - I,1,Introduction to Spring Boot,"Overview of Spring Boot and its features. 
Setting up a Spring Boot project with Spring Initializr. 
Running a simple ""Hello World"" application. 
Understanding Spring Boot's auto-configuration and convention-over-configuration approach.",,,
,,2,Dependency Injection and IoC Container,"Understanding the principles of dependency injection (DI) and inversion of control (IoC). 
Configuring and using beans with annotations (@Component, @Autowired, etc.). 
Qualifiers and primary beans. 
Constructor and setter injection.",,,
,,3,Spring Boot Data Access with Spring Data JPA,"Introduction to Spring Data JPA.
Setting up JPA entities and repositories.
CRUD operations using JpaRepository.
Query methods and custom queries.",,,
,,4,RESTful Web Services with Spring Boot,"Building RESTful APIs with Spring Boot. 
Creating REST controllers. 
Handling HTTP methods (GET, POST, PUT, DELETE). 
Request and response body handling (DTOs, ResponseEntity).",,,
,,5,Working with Spring Boot Security,"Introduction to Spring Security. 
Configuring security with Spring Boot. 
Authentication (form-based, basic authentication). 
Authorization and role-based access control (RBAC).",,,
22,Mastering Spring Boot - II,1,Testing in Spring Boot,"Overview of testing in Spring Boot. 
Writing unit tests with JUnit and Mockito. 
Integration testing with SpringBootTest. 
Test slicing and mocking dependencies.",,,
,,2,Spring Boot Actuator and Monitoring,"Introduction to Spring Boot Actuator. 
Enabling Actuator endpoints. 
Monitoring and managing application health, metrics, and environment. 
Customizing Actuator endpoints.",,,
,,3,Spring Boot Messaging with Spring Integration,"Overview of Spring Integration. 
Configuring message channels and adapters. 
Implementing message-driven architectures with Spring Boot. 
Integrating with message brokers (e.g., RabbitMQ, Kafka).",,,
,,4,Microservices Architecture with Spring Boot,"Introduction to microservices architecture. 
Building microservices with Spring Boot. 
Service discovery and registration with Eureka. 
Load balancing with Ribbon.",,,
,,5,Advanced Topics and Deployment,"Using Spring Boot Profiles for environment-specific configurations. 
Deploying Spring Boot applications to various environments (local, cloud). 
Monitoring and logging strategies in production. 
Performance optimization and scaling techniques.",,,
23,DevOps Fundamentals,1,Introduction to DevOps,"Understanding DevOps: definition, goals, and principles. 
Evolution of DevOps and its importance in modern software development. 
DevOps culture: collaboration, communication, and automation. 
Introduction to DevOps tools and technologies.",,,
,,2,Continuous Integration (CI),"Introduction to Continuous Integration (CI). 
Setting up CI pipelines with tools like Jenkins, GitLab CI, or Travis CI. 
Automating code builds, tests, and deployments. 
Configuring CI pipelines for different environments.",,,
,,3,Continuous Delivery and Deployment (CD),"Understanding Continuous Delivery (CD) and Continuous Deployment (CD). 
Implementing CD pipelines with tools like Jenkins, GitLab CI, or Spinnaker. 
Automated deployment strategies (blue-green deployments, canary releases). 
Monitoring and logging in CD pipelines.",,,
,,4,Infrastructure as Code (IaC),"Introduction to Infrastructure as Code (IaC). 
Managing infrastructure using tools like Terraform, AWS CloudFormation, or Azure Resource Manager. 
Writing infrastructure code to provision and manage resources. 
Versioning and managing infrastructure configurations.",,,
,,5,"Monitoring, Logging, and DevOps Best Practices","Introduction to monitoring and logging in DevOps. 
Monitoring tools (Prometheus, Grafana, ELK stack) and metrics. 
Centralized logging with tools like ELK stack (Elasticsearch, Logstash, Kibana) or Fluentd. 
DevOps best practices: security, compliance, disaster recovery, and scalability.",,,
24,Capstone Project - I,1,,,,,
,,2,,,,,
,,3,,,,,
,,4,,,,,
,,5,,,,,
25,"Capstone Project - II
",1,,,,,
,,2,,,,,
,,3,,,,,
,,4,,,,,
,,5,,,,,
26,Capstone Project - III,1,,,,,
,,2,,,,,
,,3,,,,,
,,4,,,,,
,,5,,,,,
27,Capstone Project - IV,1,,,,,
,,2,,,,,
,,3,,,,,
,,4,,,,,
,,5,,,,,
