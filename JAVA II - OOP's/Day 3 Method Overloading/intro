What is Method Overloading?
same name of methods but diff parameter
Feature that allows a class to have more than one method with the same name, provided their parameter 
lists are different. This means you can define multiple methods with the same name but with different parameter 
types, numbers, or both.

Benefits of Method Overloading:

1. Improved Readability: Method overloading improves code readability and usability. By using the same method name for similar operations, the code becomes more intuitive.
2. Reusability: It promotes reusability since the same method name can be used to perform a similar function with different types of input.
3. Simplifies Code: It simplifies code maintenance by grouping similar methods together under a common name, making it easier to understand and modify.
4. Consistency: Overloaded methods can provide a consistent interface for different types of data or operations, making the API easier to use and learn.



Raw:
Understanding Method Overloading and Its Benefits
What is Method Overloading?

Method overloading in Java is a feature that allows a class to have more than one method with the same name, provided their parameter lists are different. This means you can define multiple methods with the same name but with different parameter types, numbers, or both.
Benefits of Method Overloading

    Improved Readability: Method overloading improves code readability and usability. By using the same method name for similar operations, the code becomes more intuitive.
    Reusability: It promotes reusability since the same method name can be used to perform a similar function with different types of input.
    Simplifies Code: It simplifies code maintenance by grouping similar methods together under a common name, making it easier to understand and modify.
    Consistency: Overloaded methods can provide a consistent interface for different types of data or operations, making the API easier to use and learn.

Examples of Method Overloading

Here are some examples to illustrate method overloading in Java:

java

public class Main {

    // Method to add two integers
    public static int add(int a, int b) {
        return a + b;
    }

    // Overloaded method to add three integers
    public static int add(int a, int b, int c) {
        return a + b + c;
    }

    // Overloaded method to add two double values
    public static double add(double a, double b) {
        return a + b;
    }

    public static void main(String[] args) {
        System.out.println(add(2, 3));           // Output: 5
        System.out.println(add(2, 3, 4));        // Output: 9
        System.out.println(add(2.5, 3.5));       // Output: 6.0
    }
}

In this example:

    The add method is overloaded three times with different parameter lists.
    The first version takes two integers.
    The second version takes three integers.
    The third version takes two double values.

Exercises to Practice Defining and Calling Methods
Exercise 1: Overload a Method to Calculate Area

Define a class AreaCalculator with overloaded methods to calculate the area of different shapes (circle, rectangle, and triangle).

java

public class AreaCalculator {

    // Method to calculate area of a circle
    public static double calculateArea(double radius) {
        return Math.PI * radius * radius;
    }

    // Overloaded method to calculate area of a rectangle
    public static double calculateArea(double length, double width) {
        return length * width;
    }

    // Overloaded method to calculate area of a triangle
    public static double calculateArea(double base, double height, boolean isTriangle) {
        if (isTriangle) {
            return 0.5 * base * height;
        } else {
            return -1;  // Error code
        }
    }

    public static void main(String[] args) {
        System.out.println("Area of circle: " + calculateArea(5.0));                 // Output: 78.53981633974483
        System.out.println("Area of rectangle: " + calculateArea(4.0, 5.0));        // Output: 20.0
        System.out.println("Area of triangle: " + calculateArea(4.0, 5.0, true));   // Output: 10.0
    }
}

Exercise 2: Overload a Method for String Manipulation

Define a class StringManipulator with overloaded methods to concatenate strings in different ways.

java

public class StringManipulator {

    // Method to concatenate two strings
    public static String concatenate(String a, String b) {
        return a + b;
    }

    // Overloaded method to concatenate three strings
    public static String concatenate(String a, String b, String c) {
        return a + b + c;
    }

    // Overloaded method to concatenate a string with an integer
    public static String concatenate(String a, int b) {
        return a + b;
    }

    public static void main(String[] args) {
        System.out.println(concatenate("Hello", "World"));               // Output: HelloWorld
        System.out.println(concatenate("Hello", " ", "World"));          // Output: Hello World
        System.out.println(concatenate("Number: ", 123));                // Output: Number: 123
    }
}

Summary

Method overloading is a powerful feature in Java that enhances code readability, reusability, and maintainability. It allows you to define multiple methods with the same name but different parameter lists, making your code more intuitive and easier to manage. By practicing with exercises, you can master the concept and effectively apply it in your programming tasks.