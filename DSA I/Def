Introduction to Arrays:
    An array is a collection of elements, all of the same type, stored in contiguous memory locations. 
    Arrays provide a way to store multiple values in a single variable and can be accessed using indices.
    Key Characteristics of Arrays:
    Fixed Size: The size of an array is specified when it is created and cannot be changed dynamically.
    Homogeneous Elements: All elements in an array are of the same data type.
    Index-Based Access: Elements are accessed using a zero-based index.

Array Declaration and Initialization:
    Declaration
    // Declaration of an array of integers
    int[] array;

    Initialization
    // Static initialization (at the time of declaration)
    int[] array = {1, 2, 3, 4, 5};
    // Dynamic initialization (using the 'new' keyword)
    int[] array = new int[5]; // An array of 5 integers, initialized to default values (0)

    Example:

    public class ArrayExample {
    public static void main(String[] args) {
        // Static initialization
        int[] staticArray = {1, 2, 3, 4, 5};

        // Dynamic initialization
        int[] dynamicArray = new int[5]; // Array of 5 integers

        // Assigning values to the dynamic array
        for (int i = 0; i < dynamicArray.length; i++) {
            dynamicArray[i] = i + 1;
        }
    }
    }

Accessing and Modifying Array Elements
    Elements in an array are accessed using their index, which starts from 0.
    Example:
    public class AccessArray {
    public static void main(String[] args) {
        int[] array = {10, 20, 30, 40, 50};

        // Accessing elements
        int firstElement = array[0]; // 10
        int thirdElement = array[2]; // 30

        // Modifying elements
        array[1] = 25; // Now array[1] is 25

        // Printing all elements
        for (int i = 0; i < array.length; i++) {
            System.out.println("Element at index " + i + ": " + array[i]);
        }
    }
    }
Array Operations: Traversal, Searching, Sorting
Traversal
    Traversal of an array refers to the process of accessing each element in the array exactly once in a systematic 
    manner. This operation is fundamental when performing various tasks, such as printing the array's elements, 
    searching for a specific value, modifying elements, or applying some operations to each element.
    Traversal refers to the process of visiting each element of the array.

    public class TraverseArray {
    public static void main(String[] args) {
        int[] array = {10, 20, 30, 40, 50};

        // Traversing and printing all elements
        for (int i = 0; i < array.length; i++) {
            System.out.println("Element at index " + i + ": " + array[i]);
        }
    }
    }

Searching
    Searching in arrays involves finding whether a particular element exists in the array and, if it does, determining its position.
    Searching involves finding the position of a particular element in the array.

    public class SearchArray {
    public static void main(String[] args) {
        int[] array = {10, 20, 30, 40, 50};
        int target = 30;
        int index = -1;

        // Linear search
        for (int i = 0; i < array.length; i++) {
            if (array[i] == target) {
                index = i;
                break;
            }
        }

        if (index != -1) {
            System.out.println("Element found at index: " + index);
        } else {
            System.out.println("Element not found.");
        }
    }
    }

There are two primary algorithms for searching in arrays:
1. Linear Search
2. Binary Search

1. Linear Search
    Linear search is the simplest searching algorithm. It sequentially checks each element of the array until the desired element is found or 
    the array ends. This algorithm can be used on unsorted arrays.
    Time Complexity

    Best Case: O(1) (element found at the first position)
    Worst Case: O(n) (element not found or at the last position)

    Example: Linear Search in Java

    public class LinearSearch {
    public static void main(String[] args) {
        int[] array = {10, 20, 30, 40, 50};
        int target = 30;
        boolean found = false;

        // Traversing and searching for the target element
        for (int i = 0; i < array.length; i++) {
            if (array[i] == target) {
                found = true;
                System.out.println("Element " + target + " found at index: " + i);
                break;
            }
        }

        if (!found) {
            System.out.println("Element " + target + " not found.");
        }
    }
    }

2. Binary Search
    Binary search is a more efficient algorithm but requires the array to be sorted. It works by repeatedly dividing the search interval in half. 
    If the target value is less than the middle element, the search continues in the lower half; otherwise, it continues in the upper half.
    Time Complexity:
    Best Case: O(1) (middle element is the target)
    Worst Case: O(log n) (reducing the search space by half each time)

    Example: Binary Search in Java

    import java.util.Arrays;
    public class BinarySearch {
    public static void main(String[] args) {
        int[] array = {10, 20, 30, 40, 50};
        int target = 30;

        // Binary search requires the array to be sorted
        Arrays.sort(array);

        int left = 0;
        int right = array.length - 1;
        boolean found = false;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (array[mid] == target) {
                found = true;
                System.out.println("Element " + target + " found at index: " + mid);
                break;
            }

            if (array[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        if (!found) {
            System.out.println("Element " + target + " not found.");
        }
    }
    }

    When to Use Which Search?
    Linear Search: Use when the array is unsorted or small.
    Binary Search: Use when the array is sorted and large, as it is more efficient.


Sorting
    Sorting is the process of arranging elements in a specific order, typically in ascending or descending order. 
    There are several algorithms to sort arrays, each with its own advantages and use cases.
    Sorting rearranges the elements of the array in a particular order (ascending or descending).
    import java.util.Arrays;

    public class SortArray {
    public static void main(String[] args) {
        int[] array = {50, 20, 40, 10, 30};

        // Sorting the array in ascending order
        Arrays.sort(array);

        // Printing sorted array
        System.out.println("Sorted array: " + Arrays.toString(array));
    }
    }

1. Bubble Sort

    Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are 
    in the wrong order. The process is repeated until the list is sorted.
    Time Complexity

    Best Case: O(n) (when the array is already sorted)
    Worst Case: O(n²)

    Example: Bubble Sort in Java

    public class BubbleSort {
    public static void main(String[] args) {
        int[] array = {50, 20, 40, 10, 30};

        // Bubble Sort
        for (int i = 0; i < array.length - 1; i++) {
            for (int j = 0; j < array.length - 1 - i; j++) {
                if (array[j] > array[j + 1]) {
                    // Swap array[j] and array[j + 1]
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
        // Printing sorted array
        System.out.println("Sorted array: " + java.util.Arrays.toString(array));
    }
    }

2. Selection Sort
    Selection Sort divides the array into a sorted and an unsorted region. It repeatedly selects the smallest (or largest) element from the unsorted region and moves it to the end of the sorted region.
    Time Complexity

    Best Case: O(n²)
    Worst Case: O(n²)

    Example: Selection Sort in Java

    public class SelectionSort {
    public static void main(String[] args) {
        int[] array = {50, 20, 40, 10, 30};

        // Selection Sort
        for (int i = 0; i < array.length - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < array.length; j++) {
                if (array[j] < array[minIndex]) {
                    minIndex = j;
                }
            }
            // Swap array[minIndex] and array[i]
            int temp = array[minIndex];
            array[minIndex] = array[i];
            array[i] = temp;
        }

        // Printing sorted array
        System.out.println("Sorted array: " + java.util.Arrays.toString(array));
    }
    }

3. Quick Sort
    Quick Sort is a highly efficient sorting algorithm that uses the divide-and-conquer principle. It works by selecting a 'pivot' element 
    and partitioning the array into two sub-arrays, according to whether elements are less than or greater than the pivot. 
    The sub-arrays are then sorted recursively.
    Time Complexity

    Best Case: O(n log n)
    Worst Case: O(n²) (when the pivot selection is poor)

    Example: Quick Sort in Java

    public class QuickSort {
    public static void main(String[] args) {
        int[] array = {50, 20, 40, 10, 30};

        // Quick Sort
        quickSort(array, 0, array.length - 1);

        // Printing sorted array
        System.out.println("Sorted array: " + java.util.Arrays.toString(array));
    }

    public static void quickSort(int[] array, int low, int high) {
        if (low < high) {
            int pi = partition(array, low, high);

            quickSort(array, low, pi - 1);  // Before pi
            quickSort(array, pi + 1, high); // After pi
        }
    }

    public static int partition(int[] array, int low, int high) {
        int pivot = array[high];
        int i = (low - 1); // Index of smaller element
        for (int j = low; j < high; j++) {
            if (array[j] <= pivot) {
                i++;

                // Swap array[i] and array[j]
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }

        // Swap array[i + 1] and array[high] (or pivot)
        int temp = array[i + 1];
        array[i + 1] = array[high];
        array[high] = temp;

        return i + 1;
    }
    }

When to Use Which Sort?

    Bubble Sort: Simple and intuitive, but not suitable for large datasets due to its O(n²) complexity.
    Selection Sort: Better than bubble sort but still has O(n²) complexity. Useful for small datasets or educational purposes.
    Quick Sort: Efficient for large datasets with average-case time complexity of O(n log n). However, it can degrade to O(n²) in the worst case, which can be mitigated by using good pivot selection strategies.
Summary
    Arrays in Java are a powerful tool for managing collections of homogeneous data. They are essential for many algorithms and operations in data structures. Understanding how to declare, initialize, access, modify, traverse, search, and sort arrays is fundamental for any Java programmer.